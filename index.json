[{"content":" AI 虚拟桌宠伙伴系统 # minghf85/AIFE AI 虚拟桌宠伙伴系统，将会持续更新 Python 8 2 本项目实现了一个基于AI的虚拟桌宠伙伴系统，结合了大型语言模型和语音合成技术，提供低延迟的实时对话体验，轻量化，全python。\n功能特点 # 双引擎并行：同时集成ollama和GPTsovits引擎（api_v2,具体参考GPTsovits），实现高效稳定的对话处理 低延迟对话：优化语音识别和合成流程，实现快速响应 Live2D支持：支持Live2D v3模型 实时语音同步：通过mic_lipsync模块实现口型与语音的同步 模块化设计：包含LLM、TTS、STT等独立模块，便于扩展和维护 前置条件 # 对应功能需要的条件，自选是否需要安装，文末有对应链接。\n语音识别：启动加载模型时会下载Huggingface模型，需要科学上网 语音合成：已安装GPT_sovits0821版本，将本项目的api_v2.py复制替换掉GPT_sovits根目录的api_v2.py(增加了打断播放功能) 本地LLM：ollama，详细安装和运行下载模型请自行搜索 部署使用 # 安装依赖：\npip install -r requirements.txt 配置环境变量.env(不需要引号)：\n#如果要使用deepseek的话 DEEPSEEK_API_KEY = sk-xxxxxxxxxxxxxxxxx 运行主程序：\npython main.py 页面介绍\nlive2d模型\n本项目提供两个开源的live2d模型Haru和Hiyori，若使用自己的模型需要先标准化，请自行备份好原来的文件。\n语音识别\n选择你的麦克风等，第一次加载模型需要从huggingface下载模型，需科学上网。 语音生成 gptsovits设置参数请参考gptsovits项目或搜索\n要在此项目上启动api的话需要选择GPTsovits根目录和对应模型路径。 GPT权重路径参考\nSovits权重路径参考\nBERT和CNHubert参考\n对话\n设置\n可以保存你的部分配置 演示：\n暂时还没出完整教学视频，一个简单的演示视频\n主界面想和模型现实 事项 # GPTsovits 对接 deepseek api对接 stream流语音合成并行处理 接入kokoro语音合成 记忆实现 游戏性、互动性、情绪性、成长性 LLM人物姿态驱动 鸣谢 # 本项目使用了以下开源库和资源：\nlive2d-py：提供live2d角色模型加载和动画支持 ollama：用于语言模型推理 GPTsovits：用于语音合成 realtimeSTT：用于音频实时识别 其他依赖库：详见requirements.txt 特别感谢所有开源社区贡献者和项目维护者。\n项目结构 # . ├── ControlPanel.py # 控制面板 ├── Live2DWindow.py # Live2D显示窗口 ├── LLM.py # 语言模型模块 ├── STT.py # 语音识别模块 ├── TTS.py # 语音合成模块 ├── mic_lipsync.py # 口型同步模块 ├── main.py # 主程序 ├── Haru/ # Haru角色资源 ├── hiyori/ # hiyori角色资源 └── logs/ # 日志记录 注意事项 # 建议环境为python为3.12，其余版本未测试 首次运行时可能需要下载模型文件，请保持网络连接 建议使用NVIDIA GPU以获得最佳性能，根据自己显存分配各个功能 ","date":"2025-04-11","externalUrl":null,"permalink":"/projects/aife/","section":"Projects","summary":"","title":"AIFE的说明","type":"projects"},{"content":" PLLA (Personalized Language Learning Assistant) # minghf85/PLLA Personal_Language_Learning_Assistant JavaScript 1 0 PLLA 是一个可以免费、完全本地运行的个性化语言学习助手，它结合了 AI 对话、语音识别、语音合成等功能，为用户提供沉浸式的语言学习体验。\n功能特点 # 🤖 AI 对话：基于大语言模型的智能对话系统 🎙️ 语音识别：实时语音转文字功能 🔊 语音合成：支持多种 TTS 引擎 👥 角色系统：可配置多个学习场景和对话角色 📝 实时分析：语言学习点分析和翻译 👀 听力练习：支持文本遮罩的听力模式 💾 会话历史：保存和管理学习记录 技术栈 # 前端 # JavaScript (原生) CSS3 HTML5 后端 # Python Flask SQLite sensevoice(支持多种语言) RealtimeTTS(目前支持引擎edge,kokoro,coqui) GPT_SoVits(api调用，端口绑定6880) 快速开始 # 环境要求 # Python 3.10+ cuda 安装步骤 # mpv安装 运行bootstrapper/update.bat(可能需要管理员运行和vpn)，也可自行搜索如何安装mpv 克隆仓库 git clone https://github.com/your-repo/PLLA.git cd PLLA cp config1.json config.json 要使用自己的LLM模型(兼容openai接口)，请在config.json最后一项LLM_config中添加或修改自己的模型配置，默认使用排在第一个位置的模型\n创建并激活虚拟环境 conda create -n plla python=3.12 conda activate plla 安装依赖 # 基础使用：聊天、翻译、分析 pip install -r requirements.txt # 语音合成（使用时会从huggingface下载模型，需科学上网） # 下面为kokoro引擎的安装使用，包含多种主流语言，另外edge和coqui请参考realtimeTTS项目的文档说明 pip install \u0026#34;RealtimeTTS[kokoro,jp,zh]\u0026#34; # 语音识别功能参考api4sensevoice项目的说明部署安装即可，不需要则可以跳过 # 安装完成后复制本项目的stt_server.py到api4sensevoice项目下 使用方法 # 启动后端服务 # （可选）启动并等待tts服务加载完成或者使用GPT_SoVits的api，端口号6880 python tts_server.py # （可选）在api4sensevoice项目下启动stt_server.py并等待加载完成 python stt_server.py # 启动前端服务 python main.py 打开前端页面 在浏览器打开PLLA地址127.0.0.1:5000 UI使用说明 通过磁贴的形式+拖动放缩点击来实现所有功能，将联系人和场景拖入其他的磁贴，会有相应的效果和功能 演示视频 待实现 # 整合版本的推出 简化的启动方式 循序渐进的学习路径规划 教材知识库的录入 live2d或其他形象的支持 项目鸣谢 # api4sensevoice realtimeTTS GPT_SoVits ","date":"2025-04-11","externalUrl":null,"permalink":"/projects/plla/","section":"Projects","summary":"","title":"PLLA的说明","type":"projects"},{"content":" AI使用心得 # AI吗，何时来的？ # AI，全称Artificial Intelligence，意为人工智能，现在在大众的普遍认知下，特指大语言模型LLM-Large Language Model。 基于transformer的预训练生成式大语言模型最早进入大众视野是2022年11月30日chatgpt的发布，注册账号就能使用。\n不过由于墙的限制，当时我们了解有这个东西但无法方便地访问注册账号使用。 这就同时导致国内一些收费镜像站的出现，不过还是没有大范围走到人民群众的视野里去。 直到国内各大厂商开始发力，推出各自的LLM，显著降低了获取使用门槛，便逐渐开启了全民AI的时代。\n我是如何接触到AI的？ # 当然是随波逐流，跟风刷视频了解到的。\u0026#x1f60e;\n这是chatgpt发布后一个月内的一些b站视频，可以看到已经有很多人在基于chatgpt开发新东西了。 现在去翻看一些评论区对于后面AI技术的幻想，有的都已经实现了！\u0026#x1f44d;\n我现在在用AI做什么？ # 写代码，cursor的Agent(composer)确实好用，不过太贵啦。 写文章，说不定这篇文章就是生成的呢。 学技术，新的技术直接叫AI生成例子，哪里有疑惑就问。 学外语，一个随叫随到的学习伴侣有何不好。 解惑idea，自己有一个idea不知道可行性，就直接问AI。 已经离不开AI了。\u0026#x1f62d;\n如何正确合理地使用AI？ # 找到各个方向的SOTA AI # 要想用得好，底模就得选最好🤓，SOTA-State Of the Arts，在领域表现最好的model。 这就不得不提xxx(广告位)\n以下是我整理的一些sota，结合了开源和快捷\nLLM 语音对话 生图 TTS STT 代码 文笔 deepseek-r1 sesame flux kokoro sensevoice claude 3.7 sonnet deepseek V3 根据需求选择合适的AI # 表格只是参考，实际使用时需要考虑：\n使用场景 - 日常聊天选响应快的，专业领域选知识新的 预算 - 有些API按token收费，长期使用成本要考虑 隐私 - 敏感数据最好用本地部署的开源模型 语言 - 中文任务优先国产模型，英文任务选GPT系列 我的使用组合推荐 # 分享一下我日常的AI组合拳 \u0026#x1f94a;：\n代码开发 - cursor(主) + copilot(辅) 写作创作 - deepseek V3 生成初稿 + gpt-4 润色 学习研究 - claude 3.7 查资料 + perplexity 验证 日常娱乐 - 国产小模型，响应快还免费 AI使用小技巧 # Prompt工程很重要：\n明确需求：\u0026ldquo;写一封辞职信，语气专业但温和\u0026rdquo; 提供背景：\u0026ldquo;我是程序员，想转行做自媒体\u0026rdquo; 设定格式：\u0026ldquo;用markdown格式，包含标题和正文\u0026rdquo; 善用思维链(Chain-of-Thought)：\n让AI分步思考：\u0026ldquo;请先分析问题，再给出解决方案\u0026rdquo; 示例： 用户：如何提高博客流量？ AI：1. 分析当前流量来源 2. 建议SEO优化方案 3. 推荐推广渠道 验证输出不能少：\n关键信息一定要交叉验证 代码让AI解释原理 事实类查询查多个来源 未来展望 # AI发展日新月异，几个值得关注的趋势：\n多模态：图文音视频统一处理 小型化：手机端跑大模型不是梦 专业化：垂直领域专用模型 自动化：AI自主完成任务链 最后送大家一句话：\n\u0026ldquo;AI不是来取代我们的，而是让我们把时间花在更有价值的事情上\u0026rdquo; \u0026#x1f680;\n# ","date":"2025-04-09","externalUrl":null,"permalink":"/posts/ai%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/","section":"Posts","summary":"","title":"AI-Just take it","type":"posts"},{"content":" Hugo Content 结构详解 # 1. 目录结构 # Hugo的内容组织非常清晰，主要遵循以下结构：\ncontent/ ├── _index.md # 首页内容 ├── about.md # 关于页面 ├── post/ # 博客文章目录 │ ├── _index.md # 文章列表页 │ ├── first-post.md # 具体文章 │ └── second-post.md └── projects/ # 项目展示目录 ├── _index.md # 项目列表页 └── project1.md # 具体项目 2. 文章格式 # 每篇文章都包含两个部分：\nFront Matter（前置元数据） 正文内容 2.1 Front Matter 详解 # Front Matter 是文章开头的元数据部分，用 +++ 或 --- 包裹。常用字段包括：\n+++ title = \u0026#34;文章标题\u0026#34; date = \u0026#34;2025-04-09\u0026#34; description = \u0026#34;文章描述\u0026#34; tags = [\u0026#34;标签1\u0026#34;, \u0026#34;标签2\u0026#34;] categories = [\u0026#34;分类1\u0026#34;] draft = false +++ 2.2 正文内容 # 正文部分支持 Markdown 格式，可以包含：\n标题（# 一级标题） 列表 代码块 图片 表格 链接 3. 与 hugo.toml 的关联 # hugo.toml 是网站的配置文件，它定义了：\n网站的基本信息 主题设置 内容目录结构 分页设置 菜单配置 例如：\nbaseURL = \u0026#34;https://example.com\u0026#34; title = \u0026#34;我的博客\u0026#34; theme = \u0026#34;my-theme\u0026#34; [params] description = \u0026#34;网站描述\u0026#34; author = \u0026#34;作者名\u0026#34; [menu] [[menu.main]] name = \u0026#34;首页\u0026#34; url = \u0026#34;/\u0026#34; weight = 1 4. 最佳实践 # 文件命名：\n使用小写字母 用连字符（-）分隔单词 避免使用空格和特殊字符 内容组织：\n按主题分类存放 使用子目录管理相关文章 保持目录结构清晰 Front Matter：\n必填字段：title, date 建议添加：description, tags 可选字段：categories, draft 图片管理：\n建议将图片放在 static 目录 使用相对路径引用 优化图片大小 5. 常见问题 # 文章不显示：\n检查 draft 是否为 false 确认文件在正确的目录 检查文件名格式 图片不显示：\n确认图片路径正确 检查图片是否在 static 目录 验证图片文件名格式 分类不生效：\n检查 categories 字段格式 确认 hugo.toml 中的分类配置 6. 总结 # Hugo 的内容管理非常灵活，通过合理的目录结构和规范的 Front Matter，可以轻松管理大量内容。记住：\n保持结构清晰 遵循命名规范 善用分类和标签 定期备份内容 希望这篇文章能帮助你更好地理解和使用 Hugo 的内容管理系统！\n","date":"2025-04-09","externalUrl":null,"permalink":"/posts/hugo-content-explain/","section":"Posts","summary":"","title":"Explain Hugo-conten in One post","type":"posts"},{"content":" 为什么选择 Hugo + GitHub 来部署个人博客 # 在当今的互联网时代，个人博客已经成为分享知识和经验的重要平台。选择合适的工具和平台来搭建博客是每个博主都需要考虑的问题。以下是我选择 Hugo 和 GitHub 的几个原因。\n1. 高效的静态网站生成器 # Hugo 是一个非常快速的静态网站生成器，它使用 Go 语言编写，能够在几秒钟内生成数百个页面。这种高效性使得我可以专注于内容创作，而不必担心网站的加载速度。\n2. 简单的部署流程 # 使用 GitHub Pages 部署博客非常简单。只需将生成的静态文件推送到 GitHub 仓库的 gh-pages 分支，GitHub 就会自动为我提供一个可访问的博客地址。这种无缝的集成大大简化了部署流程。\n3. 版本控制与协作 # 通过 GitHub，我可以轻松地管理博客的版本，记录每次修改的历史。这不仅方便了我个人的回顾，也为未来可能的协作提供了便利。\n4. 丰富的主题和插件 # Hugo 拥有丰富的主题和插件生态系统，可以帮助我快速定制博客的外观和功能。我可以根据自己的需求选择合适的主题，甚至可以自己开发主题来实现个性化的设计。\n5. 社区支持 # Hugo 和 GitHub 都有活跃的社区支持，遇到问题时可以很容易找到解决方案或获取帮助。这种社区的力量让我在搭建和维护博客的过程中感到更加安心。\n结论 # 综上所述，Hugo 和 GitHub 的结合为我提供了一个高效、简单且灵活的博客搭建方案。无论是对于新手还是有经验的博主，这种方式都值得推荐。\n","date":"2025-04-09","externalUrl":null,"permalink":"/posts/why-hugo+github/","section":"Posts","summary":"","title":"Why hugo+github","type":"posts"},{"content":" 标题1 # 标题2 # 标题3 # 标题4 # 标题5 # 标题6 # 文字样式 # 粗体文字\n斜体文字\n粗斜体文字\n删除线文字\n下划线文字\n行内代码\n超链接\nhttps://example.com\n邮箱地址：example@example.com\n列表 # 无序列表 # 项目1 项目2 子项目1 子项目2 三级子项目 有序列表 # 第一项 第二项 子项 子项 第三项 任务列表 # 已完成任务 未完成任务 引用 # 这是一个引用块。\n可以有多行内容。\n嵌套引用\n代码块 # def hello_world(): print(\u0026#34;Hello, World!\u0026#34;) console.log(\u0026#34;Hello, World!\u0026#34;); 表格 # 左对齐 居中对齐 右对齐 单元格 单元格 单元格 长文本单元格 短 12345 分隔线 # 图片 # 标题 HTML元素 # 点击展开 这里是隐藏的内容。 这是红色的HTML div内容。 数学公式（LaTeX） # 行内公式：$E=mc^2$\n块级公式： $$ \\sum_{i=1}^{n} i = \\frac{n(n+1)}{2} $$\n脚注 # 这是一个带有脚注的句子。 这是脚注的内容。\n表情符号 # \u0026#x1f604; \u0026#x2764;\u0026#xfe0f; \u0026#x1f680;\n特殊字符 # © ™ ®\n定义列表 # 术语1 定义1 术语2 定义2 另一个定义 视频嵌入 # Youtube bilibili 这个文档包含了Markdown的大部分常用语法，包括：\n各级标题 文字样式（粗体、斜体、删除线等） 各种列表（无序、有序、任务列表） 引用块 代码块（行内和块级） 表格 分隔线 图片 HTML元素 数学公式 脚注 表情符号 特殊字符 定义列表 视频嵌入 自定义短代码 ","date":"2025-04-09","externalUrl":null,"permalink":"/posts/all-style-test/","section":"Posts","summary":"","title":"All Style Test","type":"posts"},{"content":"","date":"2025-04-12","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025-04-12","externalUrl":null,"permalink":"/categories/idea/","section":"Categories","summary":"","title":"Idea","type":"categories"},{"content":"","date":"2025-04-12","externalUrl":null,"permalink":"/tags/idea/","section":"Tags","summary":"","title":"Idea","type":"tags"},{"content":"","date":"2025-04-12","externalUrl":null,"permalink":"/ideas/","section":"Ideas","summary":"","title":"Ideas","type":"ideas"},{"content":"","date":"2025-04-12","externalUrl":null,"permalink":"/tags/innovation/","section":"Tags","summary":"","title":"Innovation","type":"tags"},{"content":"","date":"2025-04-12","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"from world import you,me minghf85/Blog_Source This is my website source HTML 0 0 ","date":"2025-04-12","externalUrl":null,"permalink":"/","section":"欢迎来到我的博客！🎉","summary":"","title":"欢迎来到我的博客！🎉","type":"page"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/ai/","section":"Tags","summary":"","title":"AI","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/aife/","section":"Tags","summary":"","title":"AIFE","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/aigc/","section":"Tags","summary":"","title":"AIGC","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/coding/","section":"Tags","summary":"","title":"Coding","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/css/","section":"Tags","summary":"","title":"Css","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/gpt-sovits/","section":"Tags","summary":"","title":"GPT-SoVits","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/html/","section":"Tags","summary":"","title":"Html","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/japanese/","section":"Tags","summary":"","title":"Japanese","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/js/","section":"Tags","summary":"","title":"Js","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/kokoro/","section":"Tags","summary":"","title":"Kokoro","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/language/","section":"Tags","summary":"","title":"Language","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/learning/","section":"Tags","summary":"","title":"Learning","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/live2d/","section":"Tags","summary":"","title":"Live2d","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/ollama/","section":"Tags","summary":"","title":"Ollama","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/categories/project/","section":"Categories","summary":"","title":"Project","type":"categories"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/project/","section":"Tags","summary":"","title":"Project","type":"tags"},{"content":"本节包含了我的一些开源项目\n","date":"2025-04-11","externalUrl":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects","type":"projects"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/stt/","section":"Tags","summary":"","title":"STT","type":"tags"},{"content":"本节包含了我的一些尝试\n","date":"2025-04-11","externalUrl":null,"permalink":"/tries/","section":"Tries","summary":"","title":"Tries","type":"tries"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/categories/try/","section":"Categories","summary":"","title":"Try","type":"categories"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/tts/","section":"Tags","summary":"","title":"TTS","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/%E5%8F%A3%E8%AF%AD/","section":"Tags","summary":"","title":"口语","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/","section":"Categories","summary":"","title":"日本語","type":"categories"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/","section":"Tags","summary":"","title":"日本語","type":"tags"},{"content":"本节包含了我的日语学习历程\n","date":"2025-04-11","externalUrl":null,"permalink":"/tries/%E6%97%A5%E6%9C%AC%E8%AA%9E/","section":"Tries","summary":"","title":"日本語","type":"tries"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/%E6%A1%8C%E5%AE%A0/","section":"Tags","summary":"","title":"桌宠","type":"tags"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/tags/animation/","section":"Tags","summary":"","title":"Animation","type":"tags"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog","type":"tags"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"Github","type":"tags"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/tags/index/","section":"Tags","summary":"","title":"Index","type":"tags"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/tags/life/","section":"Tags","summary":"","title":"Life","type":"tags"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/categories/manim/","section":"Categories","summary":"","title":"Manim","type":"categories"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/series/manim/","section":"Series","summary":"","title":"Manim","type":"series"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/tags/manim/","section":"Tags","summary":"","title":"Manim","type":"tags"},{"content":" 3b1b/manim Animation engine for explanatory math videos Python 76740 6651 本节包含了我的manim学习历程\n","date":"2025-04-09","externalUrl":null,"permalink":"/tries/manim/","section":"Tries","summary":"","title":"Manim","type":"tries"},{"content":" Manim的基础使用 # 如何创建一个scene类 # ","date":"2025-04-09","externalUrl":null,"permalink":"/tries/manim/basic-use/","section":"Tries","summary":"","title":"Manim Basic Use","type":"tries"},{"content":" Why manimce not manimgl # manimce: manim community edition # With a mature community, we can find a lot of cases for learning and fixing bugs. Authors of the community can update the version frequently to fill more usefull function. Though there is not a realtime editing and gpu acceleration,I believe the community can develop these function soon. manimgl # The original version maintained by 3Blue1Brown (Grant Sanderson) Offers real-time preview functionality (manim editor) Includes GPU acceleration for faster rendering More limited community support compared to manimce Development updates may be less frequent Key Differences # Feature manimce manimgl Community Large Small Updates Frequent Less frequent GPU Acceleration No Yes Realtime Preview No Yes Documentation Extensive Limited Recommendation # For most users, manimce is recommended due to its active community and frequent updates. However, if you specifically need GPU acceleration or real-time preview, manimgl might be worth considering.\n","date":"2025-04-09","externalUrl":null,"permalink":"/tries/manim/quick-start/","section":"Tries","summary":"","title":"Manim Quick Start","type":"tries"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/tags/markdown/","section":"Tags","summary":"","title":"Markdown","type":"tags"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/tags/math/","section":"Tags","summary":"","title":"Math","type":"tags"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/categories/post/","section":"Categories","summary":"","title":"Post","type":"categories"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/tags/post/","section":"Tags","summary":"","title":"Post","type":"tags"},{"content":"这些是一些推文\n","date":"2025-04-09","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/tags/shortcodes/","section":"Tags","summary":"","title":"Shortcodes","type":"tags"},{"content":"","date":"2025-04-09","externalUrl":null,"permalink":"/tags/visualization/","section":"Tags","summary":"","title":"Visualization","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"提交的Json格式请参考JSON format.\n友情链接 想要添加你的友情链接？ 来提交PR吧. ","externalUrl":null,"permalink":"/friends/","section":"Friends","summary":"","title":"Friends","type":"friends"},{"content":"","externalUrl":null,"permalink":"/tags/friends/","section":"Tags","summary":"","title":"Friends","type":"tags"}]